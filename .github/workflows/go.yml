name: Go CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.24.3'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Primeiro, gerar o cliente Prisma para uso em outras etapas
  generate-prisma:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Generate Prisma Client
      run: |
        cd prisma
        go run cmd/run_prisma.go generate

    - name: Cache Prisma Client
      uses: actions/cache@v3
      with:
        path: prisma/db
        key: ${{ runner.os }}-prisma-${{ github.sha }}

  lint:
    needs: generate-prisma
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Restore Prisma Client
      uses: actions/cache@v3
      with:
        path: prisma/db
        key: ${{ runner.os }}-prisma-${{ github.sha }}

    - name: Verify Prisma Client
      run: |
        if [ ! -d "prisma/db" ]; then
          echo "Prisma client not found in cache, generating..."
          cd prisma && go run cmd/run_prisma.go generate
        fi

    - name: Format code
      run: go fmt ./...

    - name: Create golangci-lint config
      run: |
        cat > .golangci.yml << EOF
        linters:
          enable:
            - errcheck
            - ineffassign
            - gofmt
            - govet
            - staticcheck
        
        issues:
          exclude-rules:
            - path: _test\.go
              linters:
                - errcheck
        EOF

    - name: Lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

    - name: Verify dependencies
      run: go mod verify

  security-scan:
    needs: generate-prisma
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Restore Prisma Client
      uses: actions/cache@v3
      with:
        path: prisma/db
        key: ${{ runner.os }}-prisma-${{ github.sha }}

    - name: Verify Prisma Client
      run: |
        if [ ! -d "prisma/db" ]; then
          echo "Prisma client not found in cache, generating..."
          cd prisma && go run cmd/run_prisma.go generate
        fi

    - name: Install gosec
      run: |
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        gosec --version

    - name: Run gosec Security Scanner
      run: |
        gosec -fmt=text -out=gosec-results.txt ./...
        cat gosec-results.txt

    - name: Upload gosec results
      if: success() || failure()
      uses: actions/upload-artifact@v3
      with:
        name: gosec-results
        path: gosec-results.txt

  test:
    runs-on: ubuntu-latest
    needs: [lint, security-scan]
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        buildkitd-flags: --debug

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Executar testes em Docker
      run: |
        docker-compose -f deployments/docker-compose.ci.yml up --build --abort-on-container-exit
        exit_code=$?
        docker-compose -f deployments/docker-compose.ci.yml down -v
        exit $exit_code

    - name: Extrair relatório de cobertura
      if: success()
      run: |
        docker cp go-auth-test:/tmp/coverage.out ./coverage.out || echo "Failed to extract coverage report"
        
    - name: Upload relatório de cobertura
      if: success() && hashFiles('./coverage.out') != ''
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coverage.out

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build e push da imagem Docker
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deployments/Dockerfile.ci
        target: production
        push: false
        tags: go-auth-system:latest
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
        
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache 