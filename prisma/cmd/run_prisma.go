package main

import (
	"fmt"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"strings"

	"github.com/joho/godotenv"
)

func main() {
	// Obt√©m o diret√≥rio de trabalho atual
	wd, err := os.Getwd()
	if err != nil {
		log.Fatalf("Erro ao obter o diret√≥rio de trabalho: %v", err)
	}
	log.Printf("Diret√≥rio de trabalho: %s", wd)

	// Lista de poss√≠veis localiza√ß√µes do arquivo de configura√ß√£o
	// A ordem √© importante - tentamos do mais espec√≠fico para o mais gen√©rico
	configPaths := []string{
		filepath.Join(wd, "..", "configs", "app.env"),         // Se executado de prisma/
		filepath.Join(wd, "configs", "app.env"),               // Se executado da raiz
		filepath.Join(filepath.Dir(wd), "configs", "app.env"), // Um n√≠vel acima
		"../configs/app.env",                                  // Relativo a prisma/
		"../../configs/app.env",                               // Relativo a prisma/cmd/
	}

	// Tenta carregar o arquivo de configura√ß√£o de cada localiza√ß√£o poss√≠vel
	var loadedPath string
	configLoaded := false

	for _, path := range configPaths {
		absPath, _ := filepath.Abs(path)
		log.Printf("Tentando carregar configura√ß√£o de: %s", absPath)

		if _, err := os.Stat(absPath); err == nil {
			if err := godotenv.Load(absPath); err == nil {
				log.Printf("‚úÖ Configura√ß√µes carregadas com sucesso de: %s", absPath)
				configLoaded = true
				loadedPath = absPath
				break
			} else {
				log.Printf("‚ùå Erro ao carregar o arquivo %s: %v", absPath, err)
			}
		} else {
			log.Printf("‚ùå Arquivo n√£o encontrado: %s", absPath)
		}
	}

	if !configLoaded {
		log.Println("‚ö†Ô∏è ATEN√á√ÉO: N√£o foi poss√≠vel carregar o arquivo de configura√ß√£o de nenhum local conhecido.")

		// Como √∫ltimo recurso, tenta encontrar recursivamente na √°rvore de diret√≥rios
		log.Println("üîç Procurando o arquivo de configura√ß√£o recursivamente...")
		foundPath := findConfigFile(filepath.Dir(wd), "app.env")

		if foundPath != "" {
			log.Printf("üîé Arquivo de configura√ß√£o encontrado em: %s", foundPath)
			if err := godotenv.Load(foundPath); err == nil {
				log.Printf("‚úÖ Configura√ß√µes carregadas com sucesso de: %s", foundPath)
				loadedPath = foundPath
				// N√£o precisamos atualizar configLoaded aqui, pois n√£o √© usado ap√≥s este ponto
			} else {
				log.Printf("‚ùå Erro ao carregar o arquivo %s: %v", foundPath, err)
			}
		} else {
			log.Println("‚ùå N√£o foi poss√≠vel encontrar o arquivo de configura√ß√£o em nenhum lugar.")
		}
	}

	// Verificar se a DATABASE_URL est√° definida
	dbUrl := os.Getenv("DATABASE_URL")
	if dbUrl == "" {
		// Definir uma URL padr√£o se n√£o estiver definida
		defaultDbUrl := "postgresql://postgres:postgres@localhost:5432/auth_system?sslmode=disable"
		os.Setenv("DATABASE_URL", defaultDbUrl)
		log.Println("‚ö†Ô∏è ATEN√á√ÉO: DATABASE_URL n√£o encontrada no arquivo de configura√ß√£o!")
		log.Printf("‚ö†Ô∏è Usando URL de banco de dados padr√£o: %s", defaultDbUrl)
	} else {
		log.Printf("‚úÖ Usando DATABASE_URL do arquivo de configura√ß√£o: %s", dbUrl)
		if loadedPath != "" {
			log.Printf("‚úÖ Carregado de: %s", loadedPath)
		}
	}

	// Obter os argumentos para o comando Prisma
	prismaArgs := []string{"github.com/steebchen/prisma-client-go"}
	if len(os.Args) > 1 {
		prismaArgs = append(prismaArgs, os.Args[1:]...)
	}

	// Executar o comando Prisma
	cmd := exec.Command("go", append([]string{"run"}, prismaArgs...)...)
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	cmd.Env = os.Environ() // Importante: passar as vari√°veis de ambiente para o comando

	log.Printf("‚ñ∂Ô∏è Executando: go %s", strings.Join(append([]string{"run"}, prismaArgs...), " "))

	if err := cmd.Run(); err != nil {
		fmt.Fprintf(os.Stderr, "‚ùå Erro ao executar o comando Prisma: %v\n", err)
		os.Exit(1)
	}
}

// Fun√ß√£o auxiliar para procurar o arquivo de configura√ß√£o recursivamente
func findConfigFile(dir, fileName string) string {
	// Limite de profundidade para evitar loops infinitos
	maxDepth := 5
	currentDepth := 0

	for currentDepth < maxDepth {
		configPath := filepath.Join(dir, "configs", fileName)
		if _, err := os.Stat(configPath); err == nil {
			return configPath
		}

		// Tenta no diret√≥rio atual
		configPath = filepath.Join(dir, fileName)
		if _, err := os.Stat(configPath); err == nil {
			return configPath
		}

		// Sobe um n√≠vel
		parentDir := filepath.Dir(dir)
		if parentDir == dir {
			// Chegamos √† raiz do sistema de arquivos
			break
		}
		dir = parentDir
		currentDepth++
	}

	return ""
}
